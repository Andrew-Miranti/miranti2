Note: The term "Client" refers to the individual donating computer time.  The term "Customer" refers to the organization using this.
The customer provides 2 things: An implementation for the functions declared in server.h, and a .tar.gz file containing a client program to run.
The server begins by calling a customer-provided initialization function and then opens a passive port which was passed in by command line and awaits a client's connection.  The server will start up a new thread for each newly connected client, and will continue waiting for more threads until the server process receives either SIGINT or SIGTERM, at which point all threads will clean up, exit and the server process will terminate (returning 0 from main after all threads have exited).  Finally, the server will call the customer-provided cleanup function.
The client, meanwhile, is run with ./client IP Port [-r].  If the -r argument is supplied, the client will use libssh2 to open an sftp connection to the server on the ssh port (not the port the server opened).  It will use this sftp connection to grab a specific client from the server from a statically defined path, set by default to "~/client.tar.gz".  It will download the client, unzip it, navigate to the resulting directory and run make.  It will then run the client_wrapper program.
The client_wrapper program will fork itself, with the child process running the client program that was just downloaded and compiled.  Data from the client_wrapper's input file will be sent to the child process by the parent process using an anonymous pipe.  The child's standard out will be received through another anonymous pipe by the client_wrapper parent program, and will be sent to the server.  The parent process connects to the server at an IP address and port that the client program passed in as a command line argument (note - this port DOES have to match the server's port).
The server, meanwhile, will receive two types of information from the client.  If the data it receives starts with an input request string (see constants.c), then the server will respond by writing the next line of its input file to the requesting client's ports.  It gets this line of input by calling the customer-provided getInput function.
Otherwise, if the data it receives starts with an output request string (see constants.c again), the server calls the customer-provided output function.
